import cairo
import numpy as np
from math import pi

"""
Generated by ChatGPT GPT-4
This script defines a draw_penrose_tiling function that takes two parameters: 
    
    iterations (the number of recursive subdivisions, with higher values 
    providing more detail)

    image_size (the size of the output image in pixels)
    
The function generates a Penrose tiling using recursive subdivision and saves 
the output as a PNG image named "penrose_tiling.png" in the current working 
directory.

You can adjust the iterations and image_size parameters to change the detail 
and size of the generated Penrose tiling.
"""

def draw_penrose_tiling(iterations, image_size):
    golden_ratio = (1 + np.sqrt(5)) / 2
    angle = 2 * pi / 5
    scale = image_size / (2 * np.sin(3 * angle))
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, image_size, image_size)
    ctx = cairo.Context(surface)

    def draw_rhombus(p, q):
        ctx.move_to(p[0], p[1])
        for i in range(1, 5):
            v = q - p
            p = p + np.array([v[1], -v[0]]) * (golden_ratio ** (2 * i - 3))
            ctx.line_to(p[0], p[1])
        ctx.close_path()
        ctx.stroke()

    def subdivide(p, q, depth):
        if depth == 0:
            draw_rhombus(p, q)
        else:
            v = (q - p) / golden_ratio
            w = np.array([v[1], -v[0]])
            subdivide(p, p + w, depth - 1)
            subdivide(p + w, q, depth - 1)
            subdivide(p + v, p + v + w, depth - 1)

    ctx.translate(image_size / 2, image_size / 2)
    ctx.scale(scale, scale)
    ctx.set_line_width(0.5 / scale)

    for i in range(5):
        p = np.array([np.cos(angle * i), np.sin(angle * i)])
        q = np.array([np.cos(angle * (i + 1)), np.sin(angle * (i + 1))])
        subdivide(p, q, iterations)

    surface.write_to_png('penrose_tiling.png')

draw_penrose_tiling(iterations=4, image_size=800)
